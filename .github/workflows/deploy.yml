name: Deploy to EC2

on:
  push:
    branches: [main] # or your default branch name
  workflow_dispatch: # Add this to enable manual triggering

env:
  EC2_HOST: ${{ secrets.EC2_HOST }} # Your EC2 instance public IP or domain
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }} # Usually 'ec2-user' for Amazon Linux
  SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }} # Your EC2 instance SSH private key

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Create deployment directory on EC2
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} 'mkdir -p /home/ec2-user/quiz-app-api'

          # Copy files to EC2
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key -r ./* ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }}:/home/ec2-user/quiz-app-api/

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} '
            # Install Docker and Docker Compose if missing
            if ! [ -x "$(command -v docker)" ]; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            
            # Navigate to the application directory
            cd /home/ec2-user/quiz-app-api
            
            # Verify docker-compose.yml exists
            ls -la docker-compose.yml
            
            # Display Docker Compose version
            docker-compose --version
            
            # Stop containers but preserve volumes
            docker-compose down || true
            
            # Remove any lingering containers with the same name
            docker rm -f quiz-app || true
            
            # Check if volume exists
            if docker volume ls | grep -q "quiz_app_postgres_data"; then
              echo "Existing volume found, preserving data"
            else
              echo "No existing volume found, will create new one"
            fi
            
            # Build and start the services
            docker-compose up -d --build
          '
